<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ucamp.JM.dao.MusicDAO">


    <select id="selectTopMusic" resultType="Music">
        <![CDATA[
        select A.* from (select music_number,music_title, music_singer, music_genre, music_image, music_file,music_like from music order by music_like desc) A
        where rownum <= 50
        ]]>
    </select>


    <!--    현호 == 음악 키워드, 장르로 검색하기-->
    <select id="SearchByKeyword" resultType="Music">
        SELECT *
        FROM (select * from music where music_genre like #{genre})
        where (music_title like #{keyword} or music_singer like #{keyword})
        Order By music_like desc
    </select>


    <select id="selectTopMusicByGenre" resultType="Music">
        <![CDATA[
        select A.* from (select music_number,music_title, music_singer, music_genre, music_image, music_file,music_like
        from music where music_genre = #{genre} order by music_like desc) A
        where rownum <= 50
        ]]>
    </select>


    <select id="selectTopMusicByDate" parameterType="String" resultType="Music">
        <![CDATA[
        select A.* from (select music_number,music_title, music_singer, music_genre, music_image, music_file,music_like
        from ${date} order by music_like desc) A
        where rownum <= 50
        ]]>
    </select>


    <select id="selectTopMusicByDateAndGenre" resultType="Music">
        <![CDATA[
        select A.* from (select music_number,music_title, music_singer, music_genre, music_image, music_file,music_like
        from ${date} where music_genre = #{genre} order by music_like desc) A
        where rownum <= 50
        ]]>

    </select>

    <update id="updateTodayMusic" parameterType="Music">
        update today_music set music_like = #{music_like} where music_number = #{music_number}
    </update>


    <update id="updateAccumulMusic" parameterType="AccumulMusic">
        update accumul set music_like = #{music_like} where music_number = #{music_number}
    </update>


    <update id="updateAccumulMusicLikeToZero">
        update accumul set music_like = 0
    </update>


    <update id="updateWeekMusicLikeToZero">
        update week_music set music_like = 0
    </update>

    <insert id="insertWeekMusic" parameterType="Music">
        insert into
        week_music(week_music_number,rank_date,music_number,music_title,music_singer,music_genre,music_release,music_image,music_file,music_lyrics,music_like)
        values (week_music_seq.NEXTVAL,TO_DATE(SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
        ,#{music_number},#{music_title},#{music_singer},#{music_genre},TO_DATE(#{music_release}, 'YYYY-MM-DD
        HH24:MI:SS')
        ,#{music_image},#{music_file},#{music_lyrics},#{music_like})
    </insert>


    <insert id="insertMonthMusic" parameterType="AccumulMusic">
        insert into month_music
        (month_music_number,rank_date,music_number,music_title,music_singer,music_genre,music_release,music_image,music_file,music_lyrics,music_like)
        values
        (month_music_seq.NEXTVAL,TO_DATE(SYSDATE, 'YYYY-MM-DD HH24:MI:SS')
        ,#{music_number},#{music_title},#{music_singer},#{music_genre},TO_DATE(#{music_release}, 'YYYY-MM-DD
        HH24:MI:SS')
        ,#{music_image},#{music_file},#{music_lyrics},#{accumul_music_like})
    </insert>
</mapper>